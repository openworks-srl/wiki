<!doctype html>
<html>

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/5.2.0/github-markdown-light.min.css" />
    <title>Openworks wiki</title>
    <link rel="icon" href="http://www.openworks.it/openw/OW.ico" type="image/x-ico">
</head>

<body>
    <a class="int-link" href="wiki?doc=index"><img style="filter: brightness(1.1); position: fixed;" src="http://www.openworks.it/openw/wp-content/themes/theme1335/images/logo.png"></a>
    <article id="content" class="markdown-body"> Loading... </article>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script src="https://unpkg.com/mustache@latest"></script>
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>

    <script>
        (async () => {
            const _404 = '<div class="text-center">'+marked.parse('# 404 File not found\n\nIl documento che stai crecando non esiste, controlla che il nome sia corretto o contatta l\'assistenza. ![404](https://raw.githubusercontent.com/openworks-srl/wiki/main/404.png)') + '</div>';
            var data = queryStringToObject(window.location.search);
            const filename = data.doc;
            data.url_params = objectToQueryString(data);
            data.data_odierna = new Date().getDate() + '-' + new Date().getMonth() + '-' + new Date().getFullYear();
            data.ow = await clean(data.ow);
            

    
            $.ajax('https://raw.githubusercontent.com/openworks-srl/wiki/main/' + filename + '.md?nocache='+Date.now())
            .done(function (markdown) {
                markdown = markdown.replace(/\{\{\#ow}\}/g, '{{#ow}}<span class="ow">').replace(/\{\{\/ow}\}/g, '</span>{{/ow}}');
                var template = Mustache.render(markdown, data);
                document.getElementById('content').innerHTML = marked.parse(template);
                $('a').each((i,e) => {
                    if ($(e).hasClass('int-link'))
                        $(e).attr('href', $(e).attr('href') + '&' + data.url_params);
                    else if (!$(e).attr('href').startsWith('/wiki?doc=')) 
                        $(e).attr('target', '_blank');
                })
            })
            .fail(() => {
                document.getElementById('content').innerHTML = _404;
            })
        })();


        function queryStringToObject(queryString) {
            const pairs = queryString.substring(1).split('&');
            var array = pairs.map((el) => {
                const parts = el.split('=');
                return parts;
            });
        
            return Object.fromEntries(array);
        }


        function objectToQueryString(object) {
            let output = '';
            for (let key in object) {
                if (key=='doc') continue;
                output += `&${key}=${object[key]}`;
            }
            return output.substring(1);
        }

        async function clean(str) {
        const msgUint8 = new TextEncoder().encode(str);
        const hashBuffer = await crypto.subtle.digest("SHA-256", msgUint8); 
        const hashArray = Array.from(new Uint8Array(hashBuffer)); 
        const hashHex = hashArray
            .map((b) => b.toString(16).padStart(2, "0"))
            .join("");
        return hashHex == '9d9554823790a1fd6824f7c9d5c41b9b98830f3f7ab02d95664afd6c09f16ee8';
        }

    </script>

    <style>
        .markdown-body {
            box-sizing: border-box;
            min-width: 200px;
            max-width: 980px;
            margin: 0 auto;
            padding: 45px;
        }

        @media (max-width: 767px) {
            .markdown-body {
                padding: 15px;
            }
        }

        .text-center {
            text-align: center;
        }

        [alt="404"] {
            height: 650px;
            width: auto;
        }

        .ow  {
        display: block;
        margin-top: 5px;
        margin-bottom: 5px;
        background-color: lavender;
        border: 1px dashed blue;
    }
    </style>
</body>


</html>
